#!/usr/bin/env node

const program = require('commander');
const package = require('../package.json');
const path = require('path');

process.title = 'QING';

const launcher = options => require('../index')(options);

const commands = {
  'watch': {
    command: 'watch [page]', // 监听一个页面；如果page === '' 则判定 要监听当前这个目录的项目
    description: '监听页面, watch [page]',
  },
  'build': {
    command: 'build [page]',
    description: '构建页面, build [page]',
  },
  'prod': {
    command: 'prod [page]',
    description: '资源上传cdn 移到配置中的online目录, prod [page]',
  },
  'deploy': {
    command: 'deploy [page]',
    description: '部署页面，资源上传cdn 代码部署到指定接口',
  },
  'init': {
    command: 'init [page]',
    description: '创建项目模板（预设和自定义）, init [template]',
  },
}

const argv = process.argv;

program
  .version(package.version, '-v, --version')

Object.keys(commands).forEach(action => {
  program
    .command(commands[action].command)
    .description(commands[action].description)
    .option('-t --type <type>', '普通模式还是sdk')
    .action((page = '', cmd) => {
      const QING_ENV = {
        name: package.name,
        version: package.version,
        cwd: process.cwd(),
        user: process.env.USER,
        _start: Date.now(),
        nodeRoot: argv[0],
        qing: argv[1],
        page,
        action,
        type: cmd.type
      };
      launcher({ QING_ENV })
    });
});

if (!commands[argv[2]] && argv[2] !== 'version' && argv[2] !== '-v') {
  program.help();
}

program.parse(process.argv);
